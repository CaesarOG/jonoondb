// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TWEET_JONOONDB_TEST_H_
#define FLATBUFFERS_GENERATED_TWEET_JONOONDB_TEST_H_

#include "flatbuffers/flatbuffers.h"


namespace jonoondb_test {

struct User;
struct Tweet;

struct User FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  uint64_t id() const { return GetField<uint64_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<uint64_t>(verifier, 6 /* id */) &&
           verifier.EndTable();
  }
};

struct UserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_id(uint64_t id) { fbb_.AddElement<uint64_t>(6, id, 0); }
  UserBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  UserBuilder &operator=(const UserBuilder &);
  flatbuffers::Offset<User> Finish() {
    auto o = flatbuffers::Offset<User>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<User> CreateUser(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   uint64_t id = 0) {
  UserBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_name(name);
  return builder_.Finish();
}

struct Tweet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t id() const { return GetField<uint64_t>(4, 0); }
  const flatbuffers::String *text() const { return GetPointer<const flatbuffers::String *>(6); }
  const User *user() const { return GetPointer<const User *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* text */) &&
           verifier.Verify(text()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* user */) &&
           verifier.VerifyTable(user()) &&
           verifier.EndTable();
  }
};

struct TweetBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) { fbb_.AddElement<uint64_t>(4, id, 0); }
  void add_text(flatbuffers::Offset<flatbuffers::String> text) { fbb_.AddOffset(6, text); }
  void add_user(flatbuffers::Offset<User> user) { fbb_.AddOffset(8, user); }
  TweetBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TweetBuilder &operator=(const TweetBuilder &);
  flatbuffers::Offset<Tweet> Finish() {
    auto o = flatbuffers::Offset<Tweet>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Tweet> CreateTweet(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t id = 0,
   flatbuffers::Offset<flatbuffers::String> text = 0,
   flatbuffers::Offset<User> user = 0) {
  TweetBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_user(user);
  builder_.add_text(text);
  return builder_.Finish();
}

inline const Tweet *GetTweet(const void *buf) { return flatbuffers::GetRoot<Tweet>(buf); }

inline bool VerifyTweetBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Tweet>(); }

inline void FinishTweetBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Tweet> root) { fbb.Finish(root); }

}  // namespace jonoondb_test

#endif  // FLATBUFFERS_GENERATED_TWEET_JONOONDB_TEST_H_
