// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_INDEXINFOFB_JONOONDB_API_H_
#define FLATBUFFERS_GENERATED_INDEXINFOFB_JONOONDB_API_H_

#include "flatbuffers/flatbuffers.h"


namespace jonoondb_api {

struct IndexInfoFB;

struct IndexInfoFB : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *column() const { return GetPointer<const flatbuffers::String *>(6); }
  uint8_t is_ascending() const { return GetField<uint8_t>(8, 1); }
  int32_t type() const { return GetField<int32_t>(10, 1); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* column */) &&
           verifier.Verify(column()) &&
           VerifyField<uint8_t>(verifier, 8 /* is_ascending */) &&
           VerifyField<int32_t>(verifier, 10 /* type */) &&
           verifier.EndTable();
  }
};

struct IndexInfoFBBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_column(flatbuffers::Offset<flatbuffers::String> column) { fbb_.AddOffset(6, column); }
  void add_is_ascending(uint8_t is_ascending) { fbb_.AddElement<uint8_t>(8, is_ascending, 1); }
  void add_type(int32_t type) { fbb_.AddElement<int32_t>(10, type, 1); }
  IndexInfoFBBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  IndexInfoFBBuilder &operator=(const IndexInfoFBBuilder &);
  flatbuffers::Offset<IndexInfoFB> Finish() {
    auto o = flatbuffers::Offset<IndexInfoFB>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<IndexInfoFB> CreateIndexInfoFB(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::String> column = 0,
   uint8_t is_ascending = 1,
   int32_t type = 1) {
  IndexInfoFBBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_column(column);
  builder_.add_name(name);
  builder_.add_is_ascending(is_ascending);
  return builder_.Finish();
}

inline const IndexInfoFB *GetIndexInfoFB(const void *buf) { return flatbuffers::GetRoot<IndexInfoFB>(buf); }

inline bool VerifyIndexInfoFBBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<IndexInfoFB>(); }

inline void FinishIndexInfoFBBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<IndexInfoFB> root) { fbb.Finish(root); }

}  // namespace jonoondb_api

#endif  // FLATBUFFERS_GENERATED_INDEXINFOFB_JONOONDB_API_H_
