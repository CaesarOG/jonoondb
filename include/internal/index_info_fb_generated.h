// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_INDEXINFOFB_JONOONDB_API_H_
#define FLATBUFFERS_GENERATED_INDEXINFOFB_JONOONDB_API_H_

#include "flatbuffers/flatbuffers.h"

namespace jonoondb_api {

struct IndexInfoFB;

struct IndexInfoFB : private flatbuffers::Table {
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(4);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *columns() const {
    return GetPointer<
        const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(
        6);
  }
  uint8_t is_ascending() const {
    return GetField<uint8_t>(8, 1);
  }
  int16_t type() const {
    return GetField<int16_t>(10, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier)
        && VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */)
        && verifier.Verify(name())
        && VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* columns */)
        && verifier.Verify(columns())
        && verifier.VerifyVectorOfStrings(columns())
        && VerifyField<uint8_t>(verifier, 8 /* is_ascending */)
        && VerifyField<int16_t>(verifier, 10 /* type */) && verifier.EndTable();
  }
};

struct IndexInfoFBBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(4, name);
  }
  void add_columns(
      flatbuffers::Offset<
          flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>>columns) {fbb_.AddOffset(6, columns);}
  void add_is_ascending(uint8_t is_ascending) {fbb_.AddElement<uint8_t>(8, is_ascending, 1);}
  void add_type(int16_t type) {fbb_.AddElement<int16_t>(10, type, 0);}
  IndexInfoFBBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) {start_ = fbb_.StartTable();}
  IndexInfoFBBuilder &operator=(const IndexInfoFBBuilder &);
  flatbuffers::Offset<IndexInfoFB> Finish() {
    auto o = flatbuffers::Offset<IndexInfoFB>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<IndexInfoFB> CreateIndexInfoFB(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<
        flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>>columns = 0,
uint8_t is_ascending = 1,
int16_t type = 0) {
  IndexInfoFBBuilder builder_(_fbb);
  builder_.add_columns(columns);
  builder_.add_name(name);
  builder_.add_type(type);
  builder_.add_is_ascending(is_ascending);
  return builder_.Finish();
}

inline const IndexInfoFB *GetIndexInfoFB(const void *buf) {
  return flatbuffers::GetRoot<IndexInfoFB>(buf);
}

inline bool VerifyIndexInfoFBBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IndexInfoFB>();
}

inline void FinishIndexInfoFBBuffer(flatbuffers::FlatBufferBuilder &fbb,
                                    flatbuffers::Offset<IndexInfoFB> root) {
  fbb.Finish(root);
}

}  // namespace jonoondb_api

#endif  // FLATBUFFERS_GENERATED_INDEXINFOFB_JONOONDB_API_H_
