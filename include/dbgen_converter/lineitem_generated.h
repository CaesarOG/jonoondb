// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_LINEITEM_DBGEN_CONVERTER_H_
#define FLATBUFFERS_GENERATED_LINEITEM_DBGEN_CONVERTER_H_

#include "flatbuffers/flatbuffers.h"

#include "customer_generated.h"

namespace dbgen_converter {
struct CUSTOMER;
}  // namespace dbgen_converter

namespace dbgen_converter {

struct LINEITEM;

struct LINEITEM FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t L_ORDERKEY() const { return GetField<int32_t>(4, 0); }
  int32_t L_PARTKEY() const { return GetField<int32_t>(6, 0); }
  int32_t L_SUPPKEY() const { return GetField<int32_t>(8, 0); }
  int32_t L_LINENUMBER() const { return GetField<int32_t>(10, 0); }
  double L_QUANTITY() const { return GetField<double>(12, 0); }
  double L_EXTENDEDPRICE() const { return GetField<double>(14, 0); }
  double L_DISCOUNT() const { return GetField<double>(16, 0); }
  double L_TAX() const { return GetField<double>(18, 0); }
  const flatbuffers::String *L_RETURNFLAG() const { return GetPointer<const flatbuffers::String *>(20); }
  const flatbuffers::String *L_LINESTATUS() const { return GetPointer<const flatbuffers::String *>(22); }
  const flatbuffers::String *L_SHIPDATE() const { return GetPointer<const flatbuffers::String *>(24); }
  const flatbuffers::String *L_COMMITDATE() const { return GetPointer<const flatbuffers::String *>(26); }
  const flatbuffers::String *L_RECEIPTDATE() const { return GetPointer<const flatbuffers::String *>(28); }
  const flatbuffers::String *L_SHIPINSTRUCT() const { return GetPointer<const flatbuffers::String *>(30); }
  const flatbuffers::String *L_SHIPMODE() const { return GetPointer<const flatbuffers::String *>(32); }
  const flatbuffers::String *L_COMMENT() const { return GetPointer<const flatbuffers::String *>(34); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* L_ORDERKEY */) &&
           VerifyField<int32_t>(verifier, 6 /* L_PARTKEY */) &&
           VerifyField<int32_t>(verifier, 8 /* L_SUPPKEY */) &&
           VerifyField<int32_t>(verifier, 10 /* L_LINENUMBER */) &&
           VerifyField<double>(verifier, 12 /* L_QUANTITY */) &&
           VerifyField<double>(verifier, 14 /* L_EXTENDEDPRICE */) &&
           VerifyField<double>(verifier, 16 /* L_DISCOUNT */) &&
           VerifyField<double>(verifier, 18 /* L_TAX */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 20 /* L_RETURNFLAG */) &&
           verifier.Verify(L_RETURNFLAG()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 22 /* L_LINESTATUS */) &&
           verifier.Verify(L_LINESTATUS()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 24 /* L_SHIPDATE */) &&
           verifier.Verify(L_SHIPDATE()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 26 /* L_COMMITDATE */) &&
           verifier.Verify(L_COMMITDATE()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 28 /* L_RECEIPTDATE */) &&
           verifier.Verify(L_RECEIPTDATE()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 30 /* L_SHIPINSTRUCT */) &&
           verifier.Verify(L_SHIPINSTRUCT()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 32 /* L_SHIPMODE */) &&
           verifier.Verify(L_SHIPMODE()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 34 /* L_COMMENT */) &&
           verifier.Verify(L_COMMENT()) &&
           verifier.EndTable();
  }
};

struct LINEITEMBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_L_ORDERKEY(int32_t L_ORDERKEY) { fbb_.AddElement<int32_t>(4, L_ORDERKEY, 0); }
  void add_L_PARTKEY(int32_t L_PARTKEY) { fbb_.AddElement<int32_t>(6, L_PARTKEY, 0); }
  void add_L_SUPPKEY(int32_t L_SUPPKEY) { fbb_.AddElement<int32_t>(8, L_SUPPKEY, 0); }
  void add_L_LINENUMBER(int32_t L_LINENUMBER) { fbb_.AddElement<int32_t>(10, L_LINENUMBER, 0); }
  void add_L_QUANTITY(double L_QUANTITY) { fbb_.AddElement<double>(12, L_QUANTITY, 0); }
  void add_L_EXTENDEDPRICE(double L_EXTENDEDPRICE) { fbb_.AddElement<double>(14, L_EXTENDEDPRICE, 0); }
  void add_L_DISCOUNT(double L_DISCOUNT) { fbb_.AddElement<double>(16, L_DISCOUNT, 0); }
  void add_L_TAX(double L_TAX) { fbb_.AddElement<double>(18, L_TAX, 0); }
  void add_L_RETURNFLAG(flatbuffers::Offset<flatbuffers::String> L_RETURNFLAG) { fbb_.AddOffset(20, L_RETURNFLAG); }
  void add_L_LINESTATUS(flatbuffers::Offset<flatbuffers::String> L_LINESTATUS) { fbb_.AddOffset(22, L_LINESTATUS); }
  void add_L_SHIPDATE(flatbuffers::Offset<flatbuffers::String> L_SHIPDATE) { fbb_.AddOffset(24, L_SHIPDATE); }
  void add_L_COMMITDATE(flatbuffers::Offset<flatbuffers::String> L_COMMITDATE) { fbb_.AddOffset(26, L_COMMITDATE); }
  void add_L_RECEIPTDATE(flatbuffers::Offset<flatbuffers::String> L_RECEIPTDATE) { fbb_.AddOffset(28, L_RECEIPTDATE); }
  void add_L_SHIPINSTRUCT(flatbuffers::Offset<flatbuffers::String> L_SHIPINSTRUCT) { fbb_.AddOffset(30, L_SHIPINSTRUCT); }
  void add_L_SHIPMODE(flatbuffers::Offset<flatbuffers::String> L_SHIPMODE) { fbb_.AddOffset(32, L_SHIPMODE); }
  void add_L_COMMENT(flatbuffers::Offset<flatbuffers::String> L_COMMENT) { fbb_.AddOffset(34, L_COMMENT); }
  LINEITEMBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  LINEITEMBuilder &operator=(const LINEITEMBuilder &);
  flatbuffers::Offset<LINEITEM> Finish() {
    auto o = flatbuffers::Offset<LINEITEM>(fbb_.EndTable(start_, 16));
    return o;
  }
};

inline flatbuffers::Offset<LINEITEM> CreateLINEITEM(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t L_ORDERKEY = 0,
   int32_t L_PARTKEY = 0,
   int32_t L_SUPPKEY = 0,
   int32_t L_LINENUMBER = 0,
   double L_QUANTITY = 0,
   double L_EXTENDEDPRICE = 0,
   double L_DISCOUNT = 0,
   double L_TAX = 0,
   flatbuffers::Offset<flatbuffers::String> L_RETURNFLAG = 0,
   flatbuffers::Offset<flatbuffers::String> L_LINESTATUS = 0,
   flatbuffers::Offset<flatbuffers::String> L_SHIPDATE = 0,
   flatbuffers::Offset<flatbuffers::String> L_COMMITDATE = 0,
   flatbuffers::Offset<flatbuffers::String> L_RECEIPTDATE = 0,
   flatbuffers::Offset<flatbuffers::String> L_SHIPINSTRUCT = 0,
   flatbuffers::Offset<flatbuffers::String> L_SHIPMODE = 0,
   flatbuffers::Offset<flatbuffers::String> L_COMMENT = 0) {
  LINEITEMBuilder builder_(_fbb);
  builder_.add_L_TAX(L_TAX);
  builder_.add_L_DISCOUNT(L_DISCOUNT);
  builder_.add_L_EXTENDEDPRICE(L_EXTENDEDPRICE);
  builder_.add_L_QUANTITY(L_QUANTITY);
  builder_.add_L_COMMENT(L_COMMENT);
  builder_.add_L_SHIPMODE(L_SHIPMODE);
  builder_.add_L_SHIPINSTRUCT(L_SHIPINSTRUCT);
  builder_.add_L_RECEIPTDATE(L_RECEIPTDATE);
  builder_.add_L_COMMITDATE(L_COMMITDATE);
  builder_.add_L_SHIPDATE(L_SHIPDATE);
  builder_.add_L_LINESTATUS(L_LINESTATUS);
  builder_.add_L_RETURNFLAG(L_RETURNFLAG);
  builder_.add_L_LINENUMBER(L_LINENUMBER);
  builder_.add_L_SUPPKEY(L_SUPPKEY);
  builder_.add_L_PARTKEY(L_PARTKEY);
  builder_.add_L_ORDERKEY(L_ORDERKEY);
  return builder_.Finish();
}

inline const dbgen_converter::LINEITEM *GetLINEITEM(const void *buf) { return flatbuffers::GetRoot<dbgen_converter::LINEITEM>(buf); }

inline bool VerifyLINEITEMBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<dbgen_converter::LINEITEM>(); }

inline void FinishLINEITEMBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<dbgen_converter::LINEITEM> root) { fbb.Finish(root); }

}  // namespace dbgen_converter

#endif  // FLATBUFFERS_GENERATED_LINEITEM_DBGEN_CONVERTER_H_
