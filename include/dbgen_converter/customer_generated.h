// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_CUSTOMER_DBGEN_CONVERTER_H_
#define FLATBUFFERS_GENERATED_CUSTOMER_DBGEN_CONVERTER_H_

#include "flatbuffers/flatbuffers.h"


namespace dbgen_converter {

struct CUSTOMER;

struct CUSTOMER FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t C_CUSTKEY() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::String *C_NAME() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *C_ADDRESS() const { return GetPointer<const flatbuffers::String *>(8); }
  int32_t C_NATIONKEY() const { return GetField<int32_t>(10, 0); }
  int32_t C_PHONE() const { return GetField<int32_t>(12, 0); }
  double C_ACCTBAL() const { return GetField<double>(14, 0); }
  const flatbuffers::String *C_MKTSEGMENT() const { return GetPointer<const flatbuffers::String *>(16); }
  const flatbuffers::String *C_COMMENT() const { return GetPointer<const flatbuffers::String *>(18); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* C_CUSTKEY */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* C_NAME */) &&
           verifier.Verify(C_NAME()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* C_ADDRESS */) &&
           verifier.Verify(C_ADDRESS()) &&
           VerifyField<int32_t>(verifier, 10 /* C_NATIONKEY */) &&
           VerifyField<int32_t>(verifier, 12 /* C_PHONE */) &&
           VerifyField<double>(verifier, 14 /* C_ACCTBAL */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* C_MKTSEGMENT */) &&
           verifier.Verify(C_MKTSEGMENT()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 18 /* C_COMMENT */) &&
           verifier.Verify(C_COMMENT()) &&
           verifier.EndTable();
  }
};

struct CUSTOMERBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_C_CUSTKEY(int32_t C_CUSTKEY) { fbb_.AddElement<int32_t>(4, C_CUSTKEY, 0); }
  void add_C_NAME(flatbuffers::Offset<flatbuffers::String> C_NAME) { fbb_.AddOffset(6, C_NAME); }
  void add_C_ADDRESS(flatbuffers::Offset<flatbuffers::String> C_ADDRESS) { fbb_.AddOffset(8, C_ADDRESS); }
  void add_C_NATIONKEY(int32_t C_NATIONKEY) { fbb_.AddElement<int32_t>(10, C_NATIONKEY, 0); }
  void add_C_PHONE(int32_t C_PHONE) { fbb_.AddElement<int32_t>(12, C_PHONE, 0); }
  void add_C_ACCTBAL(double C_ACCTBAL) { fbb_.AddElement<double>(14, C_ACCTBAL, 0); }
  void add_C_MKTSEGMENT(flatbuffers::Offset<flatbuffers::String> C_MKTSEGMENT) { fbb_.AddOffset(16, C_MKTSEGMENT); }
  void add_C_COMMENT(flatbuffers::Offset<flatbuffers::String> C_COMMENT) { fbb_.AddOffset(18, C_COMMENT); }
  CUSTOMERBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CUSTOMERBuilder &operator=(const CUSTOMERBuilder &);
  flatbuffers::Offset<CUSTOMER> Finish() {
    auto o = flatbuffers::Offset<CUSTOMER>(fbb_.EndTable(start_, 8));
    return o;
  }
};

inline flatbuffers::Offset<CUSTOMER> CreateCUSTOMER(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t C_CUSTKEY = 0,
   flatbuffers::Offset<flatbuffers::String> C_NAME = 0,
   flatbuffers::Offset<flatbuffers::String> C_ADDRESS = 0,
   int32_t C_NATIONKEY = 0,
   int32_t C_PHONE = 0,
   double C_ACCTBAL = 0,
   flatbuffers::Offset<flatbuffers::String> C_MKTSEGMENT = 0,
   flatbuffers::Offset<flatbuffers::String> C_COMMENT = 0) {
  CUSTOMERBuilder builder_(_fbb);
  builder_.add_C_ACCTBAL(C_ACCTBAL);
  builder_.add_C_COMMENT(C_COMMENT);
  builder_.add_C_MKTSEGMENT(C_MKTSEGMENT);
  builder_.add_C_PHONE(C_PHONE);
  builder_.add_C_NATIONKEY(C_NATIONKEY);
  builder_.add_C_ADDRESS(C_ADDRESS);
  builder_.add_C_NAME(C_NAME);
  builder_.add_C_CUSTKEY(C_CUSTKEY);
  return builder_.Finish();
}

inline const dbgen_converter::CUSTOMER *GetCUSTOMER(const void *buf) { return flatbuffers::GetRoot<dbgen_converter::CUSTOMER>(buf); }

inline bool VerifyCUSTOMERBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<dbgen_converter::CUSTOMER>(); }

inline void FinishCUSTOMERBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<dbgen_converter::CUSTOMER> root) { fbb.Finish(root); }

}  // namespace dbgen_converter

#endif  // FLATBUFFERS_GENERATED_CUSTOMER_DBGEN_CONVERTER_H_
