// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_REGION_DBGEN_CONVERTER_H_
#define FLATBUFFERS_GENERATED_REGION_DBGEN_CONVERTER_H_

#include "flatbuffers/flatbuffers.h"

#include "customer_generated.h"
#include "lineitem_generated.h"
#include "nation_generated.h"
#include "orders_generated.h"
#include "part_generated.h"
#include "partsupp_generated.h"

namespace dbgen_converter {
struct CUSTOMER;
}  // namespace dbgen_converter
namespace dbgen_converter {
struct LINEITEM;
}  // namespace dbgen_converter
namespace dbgen_converter {
struct NATION;
}  // namespace dbgen_converter
namespace dbgen_converter {
struct ORDERS;
}  // namespace dbgen_converter
namespace dbgen_converter {
struct PART;
}  // namespace dbgen_converter
namespace dbgen_converter {
struct PARTSUPP;
}  // namespace dbgen_converter

namespace dbgen_converter {

struct REGION;

struct REGION FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t R_REGIONKEY() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::String *R_NAME() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *R_COMMENT() const { return GetPointer<const flatbuffers::String *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* R_REGIONKEY */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* R_NAME */) &&
           verifier.Verify(R_NAME()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* R_COMMENT */) &&
           verifier.Verify(R_COMMENT()) &&
           verifier.EndTable();
  }
};

struct REGIONBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_R_REGIONKEY(int32_t R_REGIONKEY) { fbb_.AddElement<int32_t>(4, R_REGIONKEY, 0); }
  void add_R_NAME(flatbuffers::Offset<flatbuffers::String> R_NAME) { fbb_.AddOffset(6, R_NAME); }
  void add_R_COMMENT(flatbuffers::Offset<flatbuffers::String> R_COMMENT) { fbb_.AddOffset(8, R_COMMENT); }
  REGIONBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  REGIONBuilder &operator=(const REGIONBuilder &);
  flatbuffers::Offset<REGION> Finish() {
    auto o = flatbuffers::Offset<REGION>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<REGION> CreateREGION(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t R_REGIONKEY = 0,
   flatbuffers::Offset<flatbuffers::String> R_NAME = 0,
   flatbuffers::Offset<flatbuffers::String> R_COMMENT = 0) {
  REGIONBuilder builder_(_fbb);
  builder_.add_R_COMMENT(R_COMMENT);
  builder_.add_R_NAME(R_NAME);
  builder_.add_R_REGIONKEY(R_REGIONKEY);
  return builder_.Finish();
}

inline const dbgen_converter::REGION *GetREGION(const void *buf) { return flatbuffers::GetRoot<dbgen_converter::REGION>(buf); }

inline bool VerifyREGIONBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<dbgen_converter::REGION>(); }

inline void FinishREGIONBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<dbgen_converter::REGION> root) { fbb.Finish(root); }

}  // namespace dbgen_converter

#endif  // FLATBUFFERS_GENERATED_REGION_DBGEN_CONVERTER_H_
