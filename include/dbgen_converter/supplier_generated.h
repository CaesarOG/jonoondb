// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SUPPLIER_DBGEN_CONVERTER_H_
#define FLATBUFFERS_GENERATED_SUPPLIER_DBGEN_CONVERTER_H_

#include "flatbuffers/flatbuffers.h"

#include "customer_generated.h"
#include "lineitem_generated.h"
#include "nation_generated.h"
#include "orders_generated.h"
#include "part_generated.h"
#include "partsupp_generated.h"
#include "region_generated.h"

namespace dbgen_converter {
struct CUSTOMER;
}  // namespace dbgen_converter
namespace dbgen_converter {
struct LINEITEM;
}  // namespace dbgen_converter
namespace dbgen_converter {
struct NATION;
}  // namespace dbgen_converter
namespace dbgen_converter {
struct ORDERS;
}  // namespace dbgen_converter
namespace dbgen_converter {
struct PART;
}  // namespace dbgen_converter
namespace dbgen_converter {
struct PARTSUPP;
}  // namespace dbgen_converter
namespace dbgen_converter {
struct REGION;
}  // namespace dbgen_converter

namespace dbgen_converter {

struct SUPPLIER;

struct SUPPLIER FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t S_SUPPKEY() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::String *S_NAME() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *S_ADDRESS() const { return GetPointer<const flatbuffers::String *>(8); }
  int32_t S_NATIONKEY() const { return GetField<int32_t>(10, 0); }
  const flatbuffers::String *S_PHONE() const { return GetPointer<const flatbuffers::String *>(12); }
  double S_ACCTBAL() const { return GetField<double>(14, 0); }
  const flatbuffers::String *S_COMMENT() const { return GetPointer<const flatbuffers::String *>(16); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* S_SUPPKEY */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* S_NAME */) &&
           verifier.Verify(S_NAME()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* S_ADDRESS */) &&
           verifier.Verify(S_ADDRESS()) &&
           VerifyField<int32_t>(verifier, 10 /* S_NATIONKEY */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* S_PHONE */) &&
           verifier.Verify(S_PHONE()) &&
           VerifyField<double>(verifier, 14 /* S_ACCTBAL */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* S_COMMENT */) &&
           verifier.Verify(S_COMMENT()) &&
           verifier.EndTable();
  }
};

struct SUPPLIERBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_S_SUPPKEY(int32_t S_SUPPKEY) { fbb_.AddElement<int32_t>(4, S_SUPPKEY, 0); }
  void add_S_NAME(flatbuffers::Offset<flatbuffers::String> S_NAME) { fbb_.AddOffset(6, S_NAME); }
  void add_S_ADDRESS(flatbuffers::Offset<flatbuffers::String> S_ADDRESS) { fbb_.AddOffset(8, S_ADDRESS); }
  void add_S_NATIONKEY(int32_t S_NATIONKEY) { fbb_.AddElement<int32_t>(10, S_NATIONKEY, 0); }
  void add_S_PHONE(flatbuffers::Offset<flatbuffers::String> S_PHONE) { fbb_.AddOffset(12, S_PHONE); }
  void add_S_ACCTBAL(double S_ACCTBAL) { fbb_.AddElement<double>(14, S_ACCTBAL, 0); }
  void add_S_COMMENT(flatbuffers::Offset<flatbuffers::String> S_COMMENT) { fbb_.AddOffset(16, S_COMMENT); }
  SUPPLIERBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SUPPLIERBuilder &operator=(const SUPPLIERBuilder &);
  flatbuffers::Offset<SUPPLIER> Finish() {
    auto o = flatbuffers::Offset<SUPPLIER>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<SUPPLIER> CreateSUPPLIER(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t S_SUPPKEY = 0,
   flatbuffers::Offset<flatbuffers::String> S_NAME = 0,
   flatbuffers::Offset<flatbuffers::String> S_ADDRESS = 0,
   int32_t S_NATIONKEY = 0,
   flatbuffers::Offset<flatbuffers::String> S_PHONE = 0,
   double S_ACCTBAL = 0,
   flatbuffers::Offset<flatbuffers::String> S_COMMENT = 0) {
  SUPPLIERBuilder builder_(_fbb);
  builder_.add_S_ACCTBAL(S_ACCTBAL);
  builder_.add_S_COMMENT(S_COMMENT);
  builder_.add_S_PHONE(S_PHONE);
  builder_.add_S_NATIONKEY(S_NATIONKEY);
  builder_.add_S_ADDRESS(S_ADDRESS);
  builder_.add_S_NAME(S_NAME);
  builder_.add_S_SUPPKEY(S_SUPPKEY);
  return builder_.Finish();
}

inline const dbgen_converter::SUPPLIER *GetSUPPLIER(const void *buf) { return flatbuffers::GetRoot<dbgen_converter::SUPPLIER>(buf); }

inline bool VerifySUPPLIERBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<dbgen_converter::SUPPLIER>(); }

inline void FinishSUPPLIERBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<dbgen_converter::SUPPLIER> root) { fbb.Finish(root); }

}  // namespace dbgen_converter

#endif  // FLATBUFFERS_GENERATED_SUPPLIER_DBGEN_CONVERTER_H_
