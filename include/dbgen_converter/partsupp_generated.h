// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PARTSUPP_DBGEN_CONVERTER_H_
#define FLATBUFFERS_GENERATED_PARTSUPP_DBGEN_CONVERTER_H_

#include "flatbuffers/flatbuffers.h"

#include "customer_generated.h"
#include "lineitem_generated.h"
#include "nation_generated.h"
#include "orders_generated.h"
#include "part_generated.h"

namespace dbgen_converter {
struct CUSTOMER;
}  // namespace dbgen_converter
namespace dbgen_converter {
struct LINEITEM;
}  // namespace dbgen_converter
namespace dbgen_converter {
struct NATION;
}  // namespace dbgen_converter
namespace dbgen_converter {
struct ORDERS;
}  // namespace dbgen_converter
namespace dbgen_converter {
struct PART;
}  // namespace dbgen_converter

namespace dbgen_converter {

struct PARTSUPP;

struct PARTSUPP FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t PS_PARTKEY() const { return GetField<int32_t>(4, 0); }
  int32_t PS_SUPPKEY() const { return GetField<int32_t>(6, 0); }
  int32_t PS_AVAILQTY() const { return GetField<int32_t>(8, 0); }
  double PS_SUPPLYCOST() const { return GetField<double>(10, 0); }
  const flatbuffers::String *PS_COMMENT() const { return GetPointer<const flatbuffers::String *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* PS_PARTKEY */) &&
           VerifyField<int32_t>(verifier, 6 /* PS_SUPPKEY */) &&
           VerifyField<int32_t>(verifier, 8 /* PS_AVAILQTY */) &&
           VerifyField<double>(verifier, 10 /* PS_SUPPLYCOST */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* PS_COMMENT */) &&
           verifier.Verify(PS_COMMENT()) &&
           verifier.EndTable();
  }
};

struct PARTSUPPBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_PS_PARTKEY(int32_t PS_PARTKEY) { fbb_.AddElement<int32_t>(4, PS_PARTKEY, 0); }
  void add_PS_SUPPKEY(int32_t PS_SUPPKEY) { fbb_.AddElement<int32_t>(6, PS_SUPPKEY, 0); }
  void add_PS_AVAILQTY(int32_t PS_AVAILQTY) { fbb_.AddElement<int32_t>(8, PS_AVAILQTY, 0); }
  void add_PS_SUPPLYCOST(double PS_SUPPLYCOST) { fbb_.AddElement<double>(10, PS_SUPPLYCOST, 0); }
  void add_PS_COMMENT(flatbuffers::Offset<flatbuffers::String> PS_COMMENT) { fbb_.AddOffset(12, PS_COMMENT); }
  PARTSUPPBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PARTSUPPBuilder &operator=(const PARTSUPPBuilder &);
  flatbuffers::Offset<PARTSUPP> Finish() {
    auto o = flatbuffers::Offset<PARTSUPP>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<PARTSUPP> CreatePARTSUPP(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t PS_PARTKEY = 0,
   int32_t PS_SUPPKEY = 0,
   int32_t PS_AVAILQTY = 0,
   double PS_SUPPLYCOST = 0,
   flatbuffers::Offset<flatbuffers::String> PS_COMMENT = 0) {
  PARTSUPPBuilder builder_(_fbb);
  builder_.add_PS_SUPPLYCOST(PS_SUPPLYCOST);
  builder_.add_PS_COMMENT(PS_COMMENT);
  builder_.add_PS_AVAILQTY(PS_AVAILQTY);
  builder_.add_PS_SUPPKEY(PS_SUPPKEY);
  builder_.add_PS_PARTKEY(PS_PARTKEY);
  return builder_.Finish();
}

inline const dbgen_converter::PARTSUPP *GetPARTSUPP(const void *buf) { return flatbuffers::GetRoot<dbgen_converter::PARTSUPP>(buf); }

inline bool VerifyPARTSUPPBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<dbgen_converter::PARTSUPP>(); }

inline void FinishPARTSUPPBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<dbgen_converter::PARTSUPP> root) { fbb.Finish(root); }

}  // namespace dbgen_converter

#endif  // FLATBUFFERS_GENERATED_PARTSUPP_DBGEN_CONVERTER_H_
